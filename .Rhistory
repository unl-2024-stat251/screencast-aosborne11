test2 <- test %>% group_by(team)
View(test2)
#country analysis
#remove entries where medal column is null
test2 <- test %>% group_by(team) %>% count(medal)
View(test2)
#country analysis
#remove entries where medal column is null
test2 <- test %>% group_by(noc) %>% count(medal)
View(test2)
View(test2)
gapminder <- read.csv('gapminder_data.csv')
reticulate::repl_python()
import pandas as pd
gapminder = pd.read_csv('gapminder_data.csv')
quit
library(dplyr)
co2_sum <- data.frame() # This is a blank data frame so that the lines below
# work before you've filled your code in.
# You can write your code below this line, or remove
# these lines, whichever you prefer.
#add column of non null values from gapminder c02 column
gapminder_co2obs <- gapminder[,c('country','co2_tonnes_pc')] #creates a table to start working with
gapminder_co2obs <- na.omit(gapminder_co2obs)     #removes Null data
gapminder_co2obs <- gapminder_co2obs %>% group_by(country) %>% filter(n()>29)     #filters out groups with less than 30 total co2 observations
co2_sum <- gapminder_co2obs %>% group_by(country) %>% count(country, sort = TRUE)   #sets co2_sum equal to grouped and counted dataframe
colnames(co2_sum) <- c('country', 'n_obs')    #renames columns
reticulate::repl_python()
nrg_data = gapminder[['country','energy_kg_oe_pc', 'year']]   #creates working dataframe
nrg_data = nrg_data.rename(columns = {'year' : 'years'})
nrg_data = nrg_data.dropna()      #removes null data
year_count = nrg_data.groupby(['country'])['energy_kg_oe_pc'].count().reset_index()   #counts number of observations
year_count = year_count.drop(year_count[year_count['energy_kg_oe_pc']<=10].index)     #removes countries with at less than 10 years of observations
nrg_data = nrg_data[nrg_data.country.isin(year_count.country)]      #only keep rows of nrg_data who's country is not in year_count country column
energy_sum = pd.DataFrame(nrg_data.groupby(['country'])['energy_kg_oe_pc'].min().reset_index())   #finds min energy usage of each country, and turns it into energy_sum dataframe
energy_sum = energy_sum.rename(columns = {'energy_kg_oe_pc': 'min_consumption'})      #fixes column names
min = nrg_data.groupby(['country'])['energy_kg_oe_pc'].min().reset_index()['energy_kg_oe_pc']
max = nrg_data.groupby(['country'])['energy_kg_oe_pc'].max().reset_index()['energy_kg_oe_pc']     #finds max energy usages
min = pd.DataFrame(min)
max = pd.DataFrame(max)
#nrg_data.groupby(['country'])
energy_sum = energy_sum.assign(max_consumption=max)       #sets max consumption column
#minyears =nrg_data.groupby(['country'])['energy_kg_oe_pc'].min().reset_index()['year']
#avg = (energy_sum['yearmax']+energy_sum['yearmin'])/ ((maxyears) - (minyears))
quit
library(ggplot2)
#growth of gdp from 1980 to 2019
#group by country, find where the year column==1980 and ==2019 and the difference is gdp growth
gdpminder <- gapminder[, c('country', 'gdp_pc','year')]
gdpminder <- na.omit(gdpminder)
growth <- gdpminder %>% group_by(country) %>% filter(year==1980|year==2019)   #creates new dataframe with only 1980 and 2019 gdp_pc numbers recorded.
growth <- growth %>% group_by(country) %>% filter(n()>1)  #filters out countries with only one of 2019 or 1980 recorded
growth <- growth %>% group_by(country) %>% mutate(growth_pc = gdp_pc[year==2019]-gdp_pc[year==1980])    #addns new column describing gdp growth pc for each country with data in 1980 and 2019
growth <- growth %>% arrange(desc(growth_pc))   #sorts data
fastest_growing <- growth[1,1]
EG_data <- gdpminder %>% filter(country== "Equatorial Guinea")
ggplot(EG_data, aes(x=year, y=gdp_pc))+
geom_line()+
theme_classic()+
ggtitle("Equatorial Guinea GDP per capita")
GDP_growth <-gdpminder %>% group_by(country) %>% filter(year>=1990)   #removes data from years earlier than 1990
GDP_growth <- GDP_growth %>% group_by(country) %>% filter(n()>4)     #only keeps data from countries with at least 5 years of reported data
GDP_growth <- GDP_growth %>% group_by(country) %>% mutate(growth_pc = gdp_pc[year == max(year)]-gdp_pc[year==min(year)])   #adds new column describing gdp growth from earliest recorded to latest recorded.
GDP_growth <- GDP_growth %>% arrange(growth_pc)   #sorts data
biggest_decrease <- GDP_growth[1,1]
SK_data <- GDP_growth %>% filter(country== "South Korea")
ggplot(SK_data, aes(x=year, y=gdp_pc))+
geom_line()+
theme_classic()+
ggtitle("South Korea GDP per capita")
#country analysis
#remove entries where medal column is null
test2 <- test %>% group_by(noc) %>% count(medal)
ggplot(test2, aes(x=n))+
geom_bar(fill = "darkblue", color = "black")+
facet_wrap(~medal, scales = "free")
#country analysis
#remove entries where medal column is null
test2 <- test %>% group_by(noc) %>% count(medal)
ggplot(test2, aes(x=n))+
geom_bar(fill = "darkblue", color = "black")+
facet_wrap(~noc, scales = "free")
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
test3 <- test2 %>% pivot_wider(names_from = noc, values_from = n)
#ggplot(test2, aes(x=n))+
#  geom_bar(fill = "darkblue", color = "black")+
#  facet_wrap(~noc, scales = "free")
View(test3)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
test3 <- test2 %>% pivot_wider(names_from = medal, values_from = n)
#ggplot(test2, aes(x=n))+
#  geom_bar(fill = "darkblue", color = "black")+
#  facet_wrap(~noc, scales = "free")
View(test3)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
#pivot wider so we can make it into a lolipop graph
test3 <- test2 %>% pivot_wider(names_from = medal, values_from = n)
test3$medal_count <- test3 %>% (Bronze + Silver + Gold)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
#pivot wider so we can make it into a lolipop graph
test3 <- test2 %>% pivot_wider(names_from = medal, values_from = n)
test3$medal_count <- test3$Bronze + test3$Silver + test3$Gold
#ggplot(test2, aes(x=n))+
#  geom_bar(fill = "darkblue", color = "black")+
#  facet_wrap(~noc, scales = "free")
View(test3)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
#pivot wider so we can make it into a lolipop graph
test3 <- test2 %>% pivot_wider(names_from = medal, values_from = n)
test3[is.na(test3)] <- 0
test3$medal_count <- test3$Bronze + test3$Silver + test3$Gold
#ggplot(test2, aes(x=n))+
#  geom_bar(fill = "darkblue", color = "black")+
#  facet_wrap(~noc, scales = "free")
View(test3)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
#pivot wider so we can make it into a lolipop graph
test3 <- test2 %>% pivot_wider(names_from = medal, values_from = n)
test3[is.na(test3)] <- 0
test3$medal_count <- test3$Bronze + test3$Silver + test3$Gold
ggplot(test3, aes(x = noc, y = medal_count))+
geom_segment( aes( x=noc, xend=noc, y=0, yend=medal_count), color = "darkblue")+
geom_point(color="black", size=4, alpha=0.6)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
test2 <- test %>% group_by(noc) %>% count(medal)
#pivot wider so we can make it into a lolipop graph
test3 <- test2 %>% pivot_wider(names_from = medal, values_from = n)
test3[is.na(test3)] <- 0
test3$medal_count <- test3$Bronze + test3$Silver + test3$Gold
ggplot(test3, aes(x = noc, y = medal_count))+
geom_segment( aes( x=noc, xend=noc, y=0, yend=medal_count), color = "darkblue")+
geom_point(color="black", size=4, alpha=0.6)+
coord_flip()
View(test)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
working <- olympic %>% group_by(noc) %>% count(medal)
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
olympic <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv")
olympic <- na.omit(olympic)
#country analysis
#remove entries where medal column is null
#test2 now is each countries medals by type
working <- olympic %>% group_by(noc) %>% count(medal)
#pivot wider so we can make it into a lollipop graph
medal_analysis <- working %>% pivot_wider(names_from = medal, values_from = n)
#makes all values 0 where it was na so we can sum the medal counts
medal_analysis[is.na(medal_analysis)] <- 0
#heres where we sum the medal counts and boom there we have our plottable data
medal_analysis$medal_count <- medal_analysis$Bronze + medal_analysis$Silver + medal_analysis$Gold
#plots it, although its completely unreadable at this point in time...
ggplot(medal_analysis, aes(x = noc, y = medal_count))+
geom_segment( aes( x=noc, xend=noc, y=0, yend=medal_count), color = "darkblue")+
geom_point(color="black", size=4, alpha=0.6)+
coord_flip()
View(olympic)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
View(test)
View(test)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_longer(names_from = medal, values_from = n)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test2$Bronze_proportion <- test2$total_medals/test2$Bronze
test2$Silver_proportion <- test2$total_medals/test2$Silver
test2$Gold_proportion <- test2$total_medals/test2$Gold
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test2$Bronze_proportion <- test2$Bronze/test2$total_medals
test2$Silver_proportion <- test2$Silver/test2$total_medals
test2$Gold_proportion <- test2$Gold/test2$total_medals
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
olympic <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv")
olympic <- na.omit(olympic)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
test2 <- test2 %>% filter(total_medals < 25)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test2 <- test2 %>% filter(total_medals < 25)
test2$Bronze_proportion <- test2$Bronze/test2$total_medals
test2$Silver_proportion <- test2$Silver/test2$total_medals
test2$Gold_proportion <- test2$Gold/test2$total_medals
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test2 <- test2 %>% filter(total_medals > 25)
test2$Bronze_proportion <- test2$Bronze/test2$total_medals
test2$Silver_proportion <- test2$Silver/test2$total_medals
test2$Gold_proportion <- test2$Gold/test2$total_medals
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
#test4 <- test2 %>% pivot_longer()
#ggplot(test2, aes(x=age, y=total_medals))+
#  geom_bar()
test3 <- test2 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
View(test2)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
test3$total_medals <- test2$Bronze + test2$Gold + test2$Silver
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
#test4 <- test2 %>% pivot_longer()
#ggplot(test2, aes(x=age, y=total_medals))+
#  geom_bar()
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-huh, names_to = "medal_type", values_to = "n")
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "n")
#ggplot(test2, aes(x=age, y=total_medals))+
#  geom_bar()
test3 <- test2
test3$total_medals <- test3$Bronze + test3$Gold + test3$Silver
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
View(test4)
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "n")
ggplot(test2, aes(fill = medal_type, x=age, y=n))+
geom_bar(position = "fill", stat="identity")
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "n")
ggplot(test4, aes(fill = medal_type, x=age, y=n))+
geom_bar(position = "fill", stat="identity")
test3 <- test2
test3$total_medals <- test3$Bronze + test3$Gold + test3$Silver
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "number")
ggplot(test4, aes(fill = medal_type, x=age, y=number))+
geom_bar(position = "fill", stat="identity")
test3 <- test2
test3$total_medals <- test3$Bronze + test3$Gold + test3$Silver
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "number")
ggplot(test4, aes(fill = medal_type, x=age, y=number))+
geom_bar(position = "fill")
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "number")
ggplot(test4, aes(fill = medal_type, x=age, y=number))+
geom_bar(position = "fill", stat = "count")
#age analysis
#sort data by age
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#filter out ages with less than 25 total participants
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
#test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "number")
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test4 <- test2 %>% pivot_longer(-c(age, total_medals), names_to = "medal_type", values_to = "number")
ggplot(test4, aes(fill = medal_type, x=age, y=total_medals))+
geom_bar(position = "stack", stat = "identity")
test3 <- test2
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
View(test4)
View(test)
View(test2)
View(test4)
#age analysis
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
#test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "number")
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test4 <- test2 %>% pivot_longer(-c(age, total_medals), names_to = "medal_type", values_to = "number")
#stacked bar graph showing distribution of medals from each age
ggplot(test4, aes(fill = medal_type, x=age, y=total_medals))+
geom_bar(position = "stack", stat = "identity")
#add color to match each medal type hehe
ggplot(test4, aes(fill=medal_type, x=age, y=number))+
geom_bar(position = "dodge", stat= "identity")
test3 <- test2
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
#age analysis
test <- olympic %>% group_by(age) %>% count(medal)
test2 <- test %>% pivot_wider(names_from = medal, values_from = n)
test2[is.na(test2)] <- 0
#could also graph just total number of medals
#stacked bar graph would be sweet
#also grouped bar graph
#gives opportunity to show color
#test4 <- test2 %>% pivot_longer(-age, names_to = "medal_type", values_to = "number")
test2$total_medals <- test2$Bronze + test2$Gold + test2$Silver
test4 <- test2 %>% pivot_longer(-c(age, total_medals), names_to = "medal_type", values_to = "number")
#stacked bar graph showing distribution of medals from each age
ggplot(test4, aes(fill = medal_type, x=age, y=total_medals))+
geom_bar(position = "stack", stat = "identity")
#add color to match each medal type hehe
test4 <- test4 %>% filter(total_medals > 25)
ggplot(test4, aes(fill=medal_type, x=age, y=number))+
geom_bar(position = "dodge", stat= "identity")
test3 <- test2
test3 <- test3 %>% filter(total_medals > 25)
test3$Bronze_proportion <- test3$Bronze/test3$total_medals
test3$Silver_proportion <- test3$Silver/test3$total_medals
test3$Gold_proportion <- test3$Gold/test3$total_medals
#now we can graph different facets of the age data
#we can graph each ages proportion of gold medals
#with this it would be good to have only more than 25 participants
